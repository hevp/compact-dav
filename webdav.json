{
    "options": {
        "method": "options",
        "description": "Get available WebDAV HTTP options"
    },
    "download": {
        "method": "get",
        "description": "Download a file",
        "arguments": {
            "min": 1,
            "max": 2,
            "target": "@1"
        },
        "descriptions": {
            "0": "Relative remote path of file",
            "1": "Relative local path to store data to"
        }
    },
    "upload": {
        "method": "put",
        "description": "Upload a file",
        "arguments": {
            "min": 2,
            "max": 2,
            "file": "@1"
        },
        "descriptions": {
            "0": "Relative remote target path",
            "1": "Relative local path of file to upload"
        }
    },
    "list": {
        "method": "propfind",
        "description": "List properties of path",
        "headers": {
            "Depth": "1"
        },
        "parsing": [
            {
                "scope": "response",
                "items": "response",
                "variables": {
                    "path": {
                        "type": "uri",
                        "xpath": "href"
                    },
                    "date": {
                        "type": "date",
                        "xpath": "propstat/prop/getlastmodified"
                    },
                    "type": {
                        "type": "enum",
                        "xpath": "propstat/prop/resourcetype/collection",
                        "values": {
                            "present": "d",
                            "absent": "f"
                        }
                    },
                    "mimetype": {
                        "type": "string",
                        "xpath": "propstat/prop/getcontenttype"
                    },
                    "size": {
                        "type": "int",
                        "xpath": "propstat/prop/quota-used-bytes|propstat/prop/getcontentlength"
                    }
                }
            }
        ],
        "descriptions": {
            "0": "Relative remote path of object"
        }
    },
    "move": {
        "method": "move",
        "description": "Move or rename a file or folder",
        "arguments": {
            "min": 2,
            "max": 2
        },
        "headers": {
            "destination": "@1"
        },
        "options": {
            "confirm": true,
            "exists": true
        },
        "descriptions": {
            "0": "Relative remote path of source object",
            "1": "Relative remote path of target object"
        }
    },
    "copy": {
        "method": "copy",
        "description": "Copy a file or folder",
        "arguments": {
            "min": 2,
            "max": 2
        },
        "headers": {
            "destination": "@{root}@{endpoint}@1"
        },
        "options": {
            "exists": true
        },
        "descriptions": {
            "0": "Relative remote path of source object",
            "1": "Relative remote path of target object"
        }
    },
    "delete": {
        "method": "delete",
        "description": "Delete a file or folder",
        "options": {
            "confirm": true,
            "exists": true
        },
        "descriptions": {
            "0": "Relative remote path of object"
        }
    },
    "update": {
        "method": "proppatch",
        "description": "Update property of file or folder",
        "arguments": {
            "min": 3,
            "max": 3
        },
        "descriptions": {
            "0": "Relative remote path of object",
            "1": "Property name",
            "2": "Property value"
        },
        "data": {
            "root": "d:propertyupdate",
            "elements": {
                "d:set": {
                    "d:prop": [
                        {
                            "oc:@1": "@2"
                        }
                    ]
                }
            }
        }
    },
    "mkcol": {
        "method": "mkcol",
        "description": "Create new collection",
        "descriptions": {
            "0": "Relative remote path of new collection"
        }
    },
    "lock": {
        "method": "lock",
        "description": "Lock an object with an exclusive or shared lock owned by the requestor",
        "descriptions": {
            "0": "Relative remote path of object",
            "shared": "Create shared lock instead of exclusive lock",
            "timeout": "Timeout for lock"
        },
        "options": {
            "shared": false,
            "timeout": 86400
        },
        "headers": {
            "Timeout": "Infinite, Second-@{timeout}",
            "Authorization": {
                "conditions": [{
                    "exists": "@{credentials.nonce}"
                }],
                "value": "Digest username=\"@{credentials.user}\", realm=\"@{credentials.user}@@@{credentials.domain}\", uri=\"@0\", nonce=\"@{credentials.nonce}\", response=\"\", opaque=\"\""
            }
        },
        "data": {
            "root": "d:lockinfo",
            "elements": {
                "d:lockscope": {
                    "d:exclusive": {}
                },
                "d:locktype": {
                    "d:write": {}
                },
                "d:owner": {
                    "d:href": "@{credentials.hostname}#@{credentials.user}"
                }
            }
        },
        "parsing": [
            {
                "scope": "headers",
                "filter": {
                    "tag": "Lock-token",
                    "value": "<([^.]+)>"
                },
                "actions": [
                    {
                        "action": "store",
                        "realm": "locks.txt",
                        "data": "@{path}: @{filter:value}"
                    }
                ]
            }
        ]
    },
    "unlock": {
        "method": "unlock",
        "description": "Remove a lock of an object owned by the requestor",
        "descriptions": {
            "0": "Relative remote path of object"
        },
        "headers": {
            "Lock-token": "@locks"
        }
    },
    "report": {
        "method": "report",
        "description": "Report anything by property value",
        "arguments": {
            "min": 1,
            "max": 2
        },
        "descriptions": {
            "0": "Property name",
            "1": "Property value",
            "printf": "Format for print",
            "no-path": "Hide path from listing"
        },
        "defaults": {
            "1": "1"
        },
        "options": {
            "printf": "{path}",
            "no-path": true
        },
        "data": {
            "root": "oc:filter-files",
            "elements": {
                "oc:filter-rules": [
                    {
                        "oc:@0": "@1"
                    }
                ]
            }
        },
        "parsing": [
            {
                "scope": "response",
                "variables": {
                    "path": {
                        "type": "uri",
                        "xpath": "href"
                    }
                }
            }
        ]
    }
}
